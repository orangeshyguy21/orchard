# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum AiAgent {
  DEFAULT
  MINT_DASHBOARD
  MINT_INFO
}

input AiChatAbortInput {
  id: String!
}

input AiChatInput {
  agent: AiAgent
  id: String!
  messages: [AiChatMessageInput!]!
  model: String!
}

input AiChatMessageInput {
  content: String!
  role: AiMessageRole!
}

enum AiFunctionName {
  MINT_ANALYTICS_DATE_RANGE_UPDATE
  MINT_ANALYTICS_INTERVAL_UPDATE
  MINT_ANALYTICS_TYPE_UPDATE
  MINT_ANALYTICS_UNITS_UPDATE
  MINT_CONTACT_ADD
  MINT_CONTACT_REMOVE
  MINT_CONTACT_UPDATE
  MINT_DESCRIPTION_LONG_UPDATE
  MINT_DESCRIPTION_UPDATE
  MINT_ICON_URL_UPDATE
  MINT_MOTD_UPDATE
  MINT_NAME_UPDATE
  MINT_URL_ADD
  MINT_URL_REMOVE
  MINT_URL_UPDATE
}

enum AiMessageRole {
  ASSISTANT
  FUNCTION
  SYSTEM
  USER
}

enum MintAnalyticsInterval {
  custom
  day
  month
  week
}

input MintContactUpdateInput {
  info: String!
  method: String!
}

input MintDescriptionUpdateInput {
  description: String!
}

input MintIconUpdateInput {
  icon_url: String!
}

input MintMotdUpdateInput {
  motd: String
}

input MintNameUpdateInput {
  name: String
}

enum MintQuoteStatus {
  ISSUED
  PAID
  PENDING
  UNPAID
}

type MintQuoteTtlOutput {
  melt_ttl: Int
  mint_ttl: Int
}

input MintRotateKeysetInput {
  input_fee_ppk: Int
  max_order: Int
  unit: String!
}

type MintRotateKeysetOutput {
  id: String!
  input_fee_ppk: Int
  max_order: Int
  unit: String!
}

enum MintUnit {
  auth
  btc
  eur
  msat
  sat
  usd
}

input MintUrlUpdateInput {
  url: String!
}

type Mutation {
  ai_chat_abort(ai_chat_abort: AiChatAbortInput!): OrchardAiChatStream!
  mint_contact_add(mint_contact_update: MintContactUpdateInput!): OrchardMintContactUpdate!
  mint_contact_remove(mint_contact_update: MintContactUpdateInput!): OrchardMintContactUpdate!
  mint_icon_update(mint_icon_update: MintIconUpdateInput!): OrchardMintIconUpdate!
  mint_long_description_update(mint_desc_update: MintDescriptionUpdateInput!): OrchardMintDescriptionUpdate!
  mint_motd_update(mint_motd_update: MintMotdUpdateInput!): OrchardMintMotdUpdate!
  mint_name_update(mint_name_update: MintNameUpdateInput!): OrchardMintNameUpdate!
  mint_rotate_keyset(mint_rotate_keyset: MintRotateKeysetInput!): MintRotateKeysetOutput!
  mint_short_description_update(mint_desc_update: MintDescriptionUpdateInput!): OrchardMintDescriptionUpdate!
  mint_url_add(mint_url_update: MintUrlUpdateInput!): OrchardMintUrlUpdate!
  mint_url_remove(mint_url_update: MintUrlUpdateInput!): OrchardMintUrlUpdate!
  update_mint_nut04(updateNut04Input: UpdateNut04Input!): UpdateNut04Output!
  update_mint_nut04_quote(updateNut04QuoteInput: UpdateNut04QuoteInput!): UpdateNut04QuoteOutput!
  update_mint_nut05(updateNut05Input: UpdateNut05Input!): UpdateNut05Output!
  update_mint_quote_ttl(updateQuoteTtlInput: UpdateQuoteTtlInput!): MintQuoteTtlOutput!
}

type OrchardAiChatChunk {
  created_at: Int!
  done: Boolean!
  done_reason: String
  eval_count: Float
  eval_duration: Float
  id: String!
  load_duration: Float
  message: OrchardAiChatMessage!
  model: String!
  prompt_eval_count: Float
  prompt_eval_duration: Float
  total_duration: Float
}

type OrchardAiChatFunction {
  arguments: String!
  name: AiFunctionName!
}

type OrchardAiChatMessage {
  content: String!
  role: AiMessageRole!
  tool_calls: [OrchardAiChatToolCall!]
}

type OrchardAiChatStream {
  id: String!
}

type OrchardAiChatToolCall {
  function: OrchardAiChatFunction!
}

type OrchardAiModel {
  details: OrchardAiModelDetails!
  digest: String!
  model: String!
  modified_at: String!
  name: String!
  size: Float!
}

type OrchardAiModelDetails {
  families: [String!]!
  family: String!
  format: String!
  parameter_size: String!
  parent_model: String!
  quantization_level: String!
}

type OrchardBitcoinBlockCount {
  height: Int!
}

type OrchardCachedEndpoint {
  method: String!
  path: String!
}

type OrchardContact {
  info: String!
  method: String!
}

type OrchardMintAnalytics {
  amount: Int!
  created_time: UnixTimestamp!
  operation_count: Int!
  unit: MintUnit!
}

type OrchardMintBalance {
  balance: Int!
  keyset: String!
}

type OrchardMintContactUpdate {
  info: String!
  method: String!
}

type OrchardMintDatabase {
  db: String!
  version: Int!
}

type OrchardMintDescriptionUpdate {
  description: String!
}

type OrchardMintIconUpdate {
  icon_url: String!
}

type OrchardMintInfo {
  contact: [OrchardContact!]
  description: String
  description_long: String
  icon_url: String
  name: String!
  nuts: OrchardNuts!
  pubkey: String
  time: UnixTimestamp!
  urls: [String!]
  version: String!
}

type OrchardMintInfoRpc {
  contact: [OrchardContact!]!
  description: String
  description_long: String
  icon_url: String
  motd: String
  name: String
  total_issued: String!
  total_redeemed: String!
  urls: [String!]!
  version: String!
}

type OrchardMintKeyset {
  active: Boolean!
  derivation_path: String!
  derivation_path_index: Int!
  id: ID!
  input_fee_ppk: Int!
  unit: String!
  valid_from: UnixTimestamp!
  valid_to: UnixTimestamp
}

type OrchardMintMeltQuote {
  amount: Int!
  change: String
  checking_id: String!
  created_time: UnixTimestamp
  expiry: UnixTimestamp
  fee_paid: Int
  fee_reserve: Int
  method: String!
  paid: Boolean!
  paid_time: UnixTimestamp
  proof: String
  quote: ID!
  request: String!
  state: String
  unit: MintUnit!
}

type OrchardMintMintQuote {
  amount: Int!
  checking_id: String!
  created_time: UnixTimestamp
  issued: Boolean!
  method: String!
  paid: Boolean!
  paid_time: UnixTimestamp
  pubkey: String
  quote: ID!
  request: String!
  state: String
  unit: MintUnit!
}

type OrchardMintMotdUpdate {
  motd: String
}

type OrchardMintNameUpdate {
  name: String
}

type OrchardMintPromise {
  amount: Int!
  b_: ID!
  c_: String!
  created: UnixTimestamp
  dleq_e: String
  dleq_s: String
  id: String
  mint_quote: String
  swap_id: String
}

type OrchardMintProof {
  amount: Int!
  c: String!
  created: UnixTimestamp
  id: String
  melt_quote: String
  secret: String!
  witness: String
  y: String
}

type OrchardMintUrlUpdate {
  url: String!
}

type OrchardNut4 {
  disabled: Boolean!
  methods: [OrchardNut4Method!]!
}

type OrchardNut4Method {
  description: Boolean
  max_amount: Float
  method: String!
  min_amount: Float
  unit: String!
}

type OrchardNut5 {
  disabled: Boolean!
  methods: [OrchardNut5Method!]!
}

type OrchardNut5Method {
  max_amount: Float
  method: String!
  min_amount: Float
  unit: String!
}

type OrchardNut17 {
  supported: [OrchardNut17Supported!]!
}

type OrchardNut17Supported {
  commands: [String!]!
  method: String!
  unit: String!
}

type OrchardNut19 {
  cached_endpoints: [OrchardCachedEndpoint!]!
  ttl: Float!
}

type OrchardNutSupported {
  supported: Boolean!
}

type OrchardNuts {
  nut4: OrchardNut4!
  nut5: OrchardNut5!
  nut7: OrchardNutSupported!
  nut8: OrchardNutSupported!
  nut9: OrchardNutSupported!
  nut10: OrchardNutSupported!
  nut11: OrchardNutSupported!
  nut12: OrchardNutSupported!
  nut14: OrchardNutSupported!
  nut17: OrchardNut17!
  nut19: OrchardNut19!
  nut20: OrchardNutSupported!
}

type OrchardPublicImage {
  data: String
  type: String!
}

type OrchardPublicUrl {
  has_data: Boolean!
  ip_address: String
  status: Int
  url: String
}

type OrchardStatus {
  online: Boolean!
  title: String!
}

type Query {
  ai_models: [OrchardAiModel!]!
  bitcoin_blockcount: OrchardBitcoinBlockCount!
  mint_analytics_balances(date_end: UnixTimestamp, date_start: UnixTimestamp, interval: MintAnalyticsInterval, timezone: Timezone, units: [MintUnit!]): [OrchardMintAnalytics!]!
  mint_analytics_melts(date_end: UnixTimestamp, date_start: UnixTimestamp, interval: MintAnalyticsInterval, timezone: Timezone, units: [MintUnit!]): [OrchardMintAnalytics!]!
  mint_analytics_mints(date_end: UnixTimestamp, date_start: UnixTimestamp, interval: MintAnalyticsInterval, timezone: Timezone, units: [MintUnit!]): [OrchardMintAnalytics!]!
  mint_analytics_transfers(date_end: UnixTimestamp, date_start: UnixTimestamp, interval: MintAnalyticsInterval, timezone: Timezone, units: [MintUnit!]): [OrchardMintAnalytics!]!
  mint_balances: [OrchardMintBalance!]!
  mint_balances_issued: [OrchardMintBalance!]!
  mint_balances_redeemed: [OrchardMintBalance!]!
  mint_databases: [OrchardMintDatabase!]!
  mint_info: OrchardMintInfo!
  mint_info_rpc: OrchardMintInfoRpc!
  mint_keysets: [OrchardMintKeyset!]!
  mint_melt_quotes: [OrchardMintMeltQuote!]!
  mint_mint_quotes(date_end: UnixTimestamp, date_start: UnixTimestamp, status: [MintQuoteStatus!], unit: [MintUnit!]): [OrchardMintMintQuote!]!
  mint_promises(date_end: UnixTimestamp, date_start: UnixTimestamp, id_keysets: [String!]): [OrchardMintPromise!]!
  mint_proofs_pending: [OrchardMintProof!]!
  mint_proofs_used: [OrchardMintProof!]!
  mint_quote_ttl: MintQuoteTtlOutput!
  public_image(url: String!): OrchardPublicImage!
  public_urls(urls: [String!]!): [OrchardPublicUrl!]!
  status: OrchardStatus!
}

type Subscription {
  ai_chat(ai_chat: AiChatInput!): OrchardAiChatChunk!
  blockCount: OrchardBitcoinBlockCount!
}

"""Timezone custom scalar type based on IANA timezone database"""
scalar Timezone

"""A Unix timestamp in seconds"""
scalar UnixTimestamp

input UpdateNut04Input {
  description: Boolean
  disabled: Boolean
  max: Int
  method: String!
  min: Int
  unit: String!
}

type UpdateNut04Output {
  description: Boolean
  disabled: Boolean
  max: Int
  method: String!
  min: Int
  unit: String!
}

input UpdateNut04QuoteInput {
  quote_id: String!
  state: String!
}

type UpdateNut04QuoteOutput {
  quote_id: String!
  state: String!
}

input UpdateNut05Input {
  disabled: Boolean
  max: Int
  method: String!
  min: Int
  unit: String!
}

type UpdateNut05Output {
  disabled: Boolean
  max: Int
  method: String!
  min: Int
  unit: String!
}

input UpdateQuoteTtlInput {
  melt_ttl: Int
  mint_ttl: Int
}